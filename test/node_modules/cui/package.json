{
  "name": "cui",
  "description": "GUIs for the command line.",
  "version": "0.0.4",
  "main": "lib/cui.js",
  "author": {
    "name": "Jesse Tane",
    "email": "jesse.tane@gmail.com"
  },
  "dependencies": {
    "coffee-script": "1.4.0"
  },
  "bin": {
    "cui": "lib/cui.js"
  },
  "cui": "example/all",
  "repository": {
    "type": "git",
    "url": "https://github.com/jessetane/cui.git"
  },
  "readme": "```\n             .__ \n  ____  __ __|__|\n_/ ___\\|  |  \\  |\n\\  \\___|  |  /  |\n \\___  >____/|__|\n     \\/\n\n```\nGUIs for the command line.\n\n## Why\nCommand line tools are fast, but they can be hard to use. cui allows you to create optional (and potentially dynamic) views for each parameter your tool requires.\n\n## How\nViews are pushed to a sequence, and can display either buttons or fields. After each view collects input, the results are stored and the sequence advances. Views can include an action that executes after the results are stored, but before the sequence advances. Usually a tool's primary \"work\" is performed in the last view's action.\n\n## Install\n```npm install cui```\n\n## Examples\nThe examples are all executable scripts - try cd'ing into the example folder and typing ```./all```\n\n## Usage\nThis code below is essentially the same as in example/basic:\n```javascript\nvar cui = require(\"cui\");\ncui.push({\n  title: \"This is a very basic example.\",\n  type: \"buttons\",\n  data: [\n    \"One\",\n    \"Two\",\n    \"Three\"\n  ],\n  action: function () {\n    console.log(\"You could do something now with: \\\"\" + cui.results[0] + \"\\\"\");\n  }\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "cui@0.0.4",
  "dist": {
    "shasum": "6adc86c3edc2da489840160e050c54c2cc30b27e"
  },
  "_from": "cui@0.0.4"
}
